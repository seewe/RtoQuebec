library(blogdown)
new_site(dir = ".", install_hugo = TRUE, format = "toml",
sample = TRUE, theme = "vjeantet/hugo-theme-docdock", hostname = "github.com",
theme_example = TRUE, serve = interactive())
new_site(dir = ".", install_hugo = TRUE, format = "toml",
sample = TRUE, theme = "Tazeg/hugo-blog-jeffprod", hostname = "github.com",
theme_example = TRUE)
library(dplyr)
library(dplyr)
blogdown:::serve_site()
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE)
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
View(etudiants)
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa<-etudiants[,-1]  ;   colnames(Mpa)<-etudiants[,1]
View(Mpa)
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa<-etudiants[,-1]  ;   row.names(Mpa)<-etudiants[,1]
View(Mpa)
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa<-etudiants[,-1]  ;   row.names(Mpa)<-etudiants[,1]
Mpa
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-etudiants[,-1]  ;   row.names(Mpa.etud)<-etudiants[,1]
Mpa.etud
source("F:/codeSources/fonctionsProjet.R")
install.packages("vegan")
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.Fosse.4.5.HI)  ;  OBSdist
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.etud)  ;  OBSdist
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-1])  ;   row.names(Mpa.etud)<-etudiants[,1]
Mpa.etud
etudiants<-read.table("F:/RQuebec/content/post/files/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-1])  ;   row.names(Mpa.etud)<-etudiants[,1]
etudiants
View(Mpa.etud)
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.etud)  ;  OBSdist
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.etud)  ;  OBSdist
Smpa.etud<-simulMpa(Mpa.etud, method = "r1", simul = 1000)
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.etud)  ;  OBSdist
Smpa.etud<-simulMpa(Mpa.etud, method = "r1", simul = 10000)
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
source("F:/codeSources/fonctionsProjet.R")
OBSdist<-distance(Mpa.etud)  ;  OBSdist
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 10000)
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
#Indicateurs simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Calcul de la matrice de distance
OBSdist<-distance(Mpa.etud)  ;  OBSdist
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 100)
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
#Indicateurs simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)  ;  OBSdist
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 100)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(temp=p.val.temp.etud, N0=p.val.n0.etud, NODF=p.val.nodf.etud, Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)  ;  cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
#
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)  ;  OBSdist
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(temp=p.val.temp.etud, N0=p.val.n0.etud, NODF=p.val.nodf.etud, Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)  ;  cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
#
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$p.val.sor[i]<-Exactest(OBSdist$Sor[i],SIMsor[i,])
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.05,]  ;  Test.cooc
Test.sor<-OBSdist[OBSdist$p.val.sor<=0.05,]  #;  Test.sor
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.05,]  ;  Test.cooc
bdgraph<-Test.cooc[,c("from","to","Sor")]
color1<-"darkseagreen2" ; color2<-"lightblue1" ; color3<-"black"
g=graph.data.frame(bdgraph[,-3], directed=FALSE)
graph_layout=layout.fruchterman.reingold(g)
plot.igraph(g,
layout=graph_layout,
edge.width=(exp(bdgraph$Sor)),
vertex.label.cex=0.7,
vertex.color=color1,
vertex.frame.color=color2,
vertex.size=18,
edge.color=color3
)
vertx<-as.factor(vertex.attributes(g)$name)  ;  lengthh<-length(vertx)
netw3d.from<-as.character(Test.cooc$from)   ;  netw3d.to<-as.character(Test.cooc$to)
MyNodes<-data.frame( species=levels(vertx) , group=factor(substr(vertx,1,4)) , size=rep(5,lengthh))
MyLinks<-data.frame(from=as.double(factor(netw3d.from,levels(vertx)))-1, # On fait -1 pour indexer à 0
to=as.double(factor(netw3d.to,levels(vertx)))-1,     # On fait -1 pour indexer à 0
Sor=exp(Test.cooc$Sor) )  # exp() pour ne pas avoir des liens nuls
forceNetwork(Links = MyLinks, Nodes = MyNodes, Source = "from", Target = "to", Value = "Sor",
NodeID = "species", Group = "group", opacity = 0.9, Nodesize = "size",
linkDistance = 90, fontSize = 20, linkColour = "gray", legend = TRUE)
View(MyNodes)
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-1])  ;   row.names(Mpa.etud)<-etudiants[,1]
etudiants
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)  ; head(OBSdist,10)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(temp=p.val.temp.etud, N0=p.val.n0.etud, NODF=p.val.nodf.etud, Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)  ;  cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$p.val.sor[i]<-Exactest(OBSdist$Sor[i],SIMsor[i,])
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.05,]  ;  Test.cooc
Test.sor<-OBSdist[OBSdist$p.val.sor<=0.05,]  #;  Test.sor
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-1])  ;   row.names(Mpa.etud)<-etudiants[,1]
etudiants
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)  ; head(OBSdist,10)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(temp=p.val.temp.etud, N0=p.val.n0.etud, NODF=p.val.nodf.etud, Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)  ;  cbind.data.frame( dim(SIMcooc)  ,  dim(SIMsor) )
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$p.val.sor[i]<-Exactest(OBSdist$Sor[i],SIMsor[i,])
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.05,]  ;  Test.cooc
Test.sor<-OBSdist[OBSdist$p.val.sor<=0.05,]  #;  Test.sor
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:plyr", unload=TRUE)
