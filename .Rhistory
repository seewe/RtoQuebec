library(networkD3) # POUR CONSTRUIRE LES RESEAUX INTERACTIFS
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
head(etudiants,5)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
head(etudiants,5)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$meanSimCooc[i]<-mean(SIMcooc[i,])
if(OBSdist$cooc[i]>mean(SIMcooc[i,])){
OBSdist$sens.cooc[i]<-"Similarite"
}else if((OBSdist$cooc[i]<mean(SIMcooc[i,]))){
OBSdist$sens.cooc[i]<-"Dissimilarite"
}
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.21,]  ;  head(Test.cooc[,-4],5)
###########################################
# CODE R POUR CONSTRUIRE LES RESEAUX NONS #
# INTERACTIFS                             #
###########################################
# Définir les couleurs du graphe
color1<-"darkseagreen2" ; color2<-"lightblue1" ; color3<-"black"
# Jeu de données pour représenter le graphe
bdgraph<-Test.cooc[,c("from","to","Sor")]
g=graph.data.frame(bdgraph[,-3], directed=FALSE)
graph_layout=layout.fruchterman.reingold(g)
# Représentation du graphe
plot.igraph(g,
layout=graph_layout,
edge.width=(exp(bdgraph$Sor)),
vertex.label.cex=0.9,
vertex.color=color1,
vertex.frame.color=color2,
vertex.size=18,
edge.color=color3
)
######################################################
# CODE R POUR CONSTRUIRE UN RESEAU INTERACTIF AVEC R #
######################################################
# Les noeuds du graphe
vertx<-as.factor(vertex.attributes(g)$name)
nnod<-length(vertx)
netw3d.from<-as.character(Test.cooc$from)
netw3d.to<-as.character(Test.cooc$to)
# Création du jeu de données de description des noeud
# Nom des noeuds
MyNodes<-data.frame( species=levels(vertx) )  ;  group<-c()
# Groupe des noeuds
for (i in 1:nnod) {
nom.e<-as.character(etudiants$Etudiants)
grp.e<-etudiants[nom.e==as.character(MyNodes[i,]),2]
grp<-as.character(grp.e)
group<-c(group,grp)
}
# resultat
MyNodes<-data.frame( student=levels(vertx) ,
group=factor(group) ,
size=rep(5,nnod))
# Jeu de données qui spécifie les liens entre les étudiants
# ( On fait -1 pour indexer à 0)
# (+1 pour eviter des liens nuls)
MyLinks<-data.frame(from=as.double(factor(netw3d.from,levels(vertx)))-1,
to=as.double(factor(netw3d.to,levels(vertx)))-1,
Cooc=Test.cooc$cooc+1,
typeLink=as.factor(Test.cooc$sens.cooc ))
# Vecteur de couleur des liens entre les étudiants
Colinks<-ifelse(MyLinks$typeLink=="Similarite","black","red")
MyLinks$Linkcolor<-Colinks
# Représentation du graphe
forceNetwork(Links = MyLinks, Nodes = MyNodes, Source = "from",
Target = "to", Value = "Cooc", NodeID = "student",
Group = "group", opacity = 0.9, Nodesize = "size",
linkDistance = 90, fontSize = 20, linkColour = Colinks,
legend = TRUE)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
head(etudiants,5)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$meanSimCooc[i]<-mean(SIMcooc[i,])
if(OBSdist$cooc[i]>mean(SIMcooc[i,])){
OBSdist$sens.cooc[i]<-"Similarite"
}else if((OBSdist$cooc[i]<mean(SIMcooc[i,]))){
OBSdist$sens.cooc[i]<-"Dissimilarite"
}
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.21,]  ;  head(Test.cooc[,-4],5)
###########################################
# CODE R POUR CONSTRUIRE LES RESEAUX NONS #
# INTERACTIFS                             #
###########################################
# Définir les couleurs du graphe
color1<-"darkseagreen2" ; color2<-"lightblue1" ; color3<-"black"
# Jeu de données pour représenter le graphe
bdgraph<-Test.cooc[,c("from","to","Sor")]
g=graph.data.frame(bdgraph[,-3], directed=FALSE)
graph_layout=layout.fruchterman.reingold(g)
# Représentation du graphe
plot.igraph(g,
layout=graph_layout,
edge.width=(exp(bdgraph$Sor)),
vertex.label.cex=0.9,
vertex.color=color1,
vertex.frame.color=color2,
vertex.size=18,
edge.color=color3
)
######################################################
# CODE R POUR CONSTRUIRE UN RESEAU INTERACTIF AVEC R #
######################################################
# Les noeuds du graphe
vertx<-as.factor(vertex.attributes(g)$name)
nnod<-length(vertx)
netw3d.from<-as.character(Test.cooc$from)
netw3d.to<-as.character(Test.cooc$to)
# Création du jeu de données de description des noeud
# Nom des noeuds
MyNodes<-data.frame( species=levels(vertx) )  ;  group<-c()
# Groupe des noeuds
for (i in 1:nnod) {
nom.e<-as.character(etudiants$Etudiants)
grp.e<-etudiants[nom.e==as.character(MyNodes[i,]),2]
grp<-as.character(grp.e)
group<-c(group,grp)
}
# resultat
MyNodes<-data.frame( student=levels(vertx) ,
group=factor(group) ,
size=rep(5,nnod))
# Jeu de données qui spécifie les liens entre les étudiants
# ( On fait -1 pour indexer à 0)
# (+1 pour eviter des liens nuls)
MyLinks<-data.frame(from=as.double(factor(netw3d.from,levels(vertx)))-1,
to=as.double(factor(netw3d.to,levels(vertx)))-1,
Cooc=Test.cooc$cooc+1,
typeLink=as.factor(Test.cooc$sens.cooc ))
# Vecteur de couleur des liens entre les étudiants
Colinks<-ifelse(MyLinks$typeLink=="Similarite","black","red")
MyLinks$Linkcolor<-Colinks
# Représentation du graphe
forceNetwork(Links = MyLinks, Nodes = MyNodes, Source = "from",
Target = "to", Value = "Cooc", NodeID = "student",
Group = "group", opacity = 0.9, Nodesize = "size",
linkDistance = 90, fontSize = 20, linkColour = Colinks,
legend = TRUE)
head(MyNodes,3)
head(MyLinks,3)
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
head(etudiants,5)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$meanSimCooc[i]<-mean(SIMcooc[i,])
if(OBSdist$cooc[i]>mean(SIMcooc[i,])){
OBSdist$sens.cooc[i]<-"Similarite"
}else if((OBSdist$cooc[i]<mean(SIMcooc[i,]))){
OBSdist$sens.cooc[i]<-"Dissimilarite"
}
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.21,]  ;  head(Test.cooc[,-4],5)
###########################################
# CODE R POUR CONSTRUIRE LES RESEAUX NONS #
# INTERACTIFS                             #
###########################################
# Définir les couleurs du graphe
color1<-"darkseagreen2" ; color2<-"lightblue1" ; color3<-"black"
# Jeu de données pour représenter le graphe
bdgraph<-Test.cooc[,c("from","to","Sor")]
g=graph.data.frame(bdgraph[,-3], directed=FALSE)
graph_layout=layout.fruchterman.reingold(g)
# Représentation du graphe
plot.igraph(g,
layout=graph_layout,
edge.width=(exp(bdgraph$Sor)),
vertex.label.cex=0.9,
vertex.color=color1,
vertex.frame.color=color2,
vertex.size=18,
edge.color=color3
)
######################################################
# CODE R POUR CONSTRUIRE UN RESEAU INTERACTIF AVEC R #
######################################################
# Les noeuds du graphe
vertx<-as.factor(vertex.attributes(g)$name)
nnod<-length(vertx)
netw3d.from<-as.character(Test.cooc$from)
netw3d.to<-as.character(Test.cooc$to)
# Création du jeu de données de description des noeud
# Nom des noeuds
MyNodes<-data.frame( species=levels(vertx) )  ;  group<-c()
# Groupe des noeuds
for (i in 1:nnod) {
nom.e<-as.character(etudiants$Etudiants)
grp.e<-etudiants[nom.e==as.character(MyNodes[i,]),2]
grp<-as.character(grp.e)
group<-c(group,grp)
}
# resultat
MyNodes<-data.frame( student=levels(vertx) ,
group=factor(group) ,
size=rep(5,nnod))
# Jeu de données qui spécifie les liens entre les étudiants
# ( On fait -1 pour indexer à 0)
# (+1 pour eviter des liens nuls)
MyLinks<-data.frame(from=as.double(factor(netw3d.from,levels(vertx)))-1,
to=as.double(factor(netw3d.to,levels(vertx)))-1,
Cooc=Test.cooc$cooc+1,
typeLink=as.factor(Test.cooc$sens.cooc ))
# Vecteur de couleur des liens entre les étudiants
Colinks<-ifelse(MyLinks$typeLink=="Similarite","black","red")
MyLinks$Linkcolor<-Colinks
# Représentation du graphe
forceNetwork(Links = MyLinks, Nodes = MyNodes, Source = "from",
Target = "to", Value = "Cooc", NodeID = "student",
Group = "group", opacity = 0.9, Nodesize = "size",
linkDistance = 90, fontSize = 20, linkColour = Colinks,
legend = TRUE)
head(MyNodes,3)
head(MyLinks,3)
# Chargement des codes sources
source("F:/codeSources/fonctionsProjet.R")
# Indicateurs de regroupement observés
OBS.etud<-ObserIndicators(Mpa.etud)
# Calcul de la matrice de distance observée
OBSdist<-distance(Mpa.etud)
# Simulation des Mpa par la méthode du quasiswap
Smpa.etud<-simulMpa(Mpa.etud, method = "quasiswap", simul = 1000)
# Indicateurs de regroupement simulés
Sind.etud<-simulIndicators(Smpa.etud, mccores = 3)
# Structure de regroupement dans la salle de classe
# --p.valeur du test exact
p.val.temp.etud<-Exactest(OBS.etud$Obstemp, Sind.etud$temp) ;
p.val.n0.etud<-Exactest(OBS.etud$Obsn0, Sind.etud$n0)  ;
p.val.nodf.etud<-Exactest(OBS.etud$Obsnodf, Sind.etud$nodf)
p.val.Cscore.etud<-Exactest(OBS.etud$ObsCscore, Sind.etud$Cscore)
res.pval.etud<-data.frame(Indice_temperature=p.val.temp.etud, Indice_N0=p.val.n0.etud, Indice_NODF=p.val.nodf.etud, Indice_Cscore=p.val.Cscore.etud)
rownames(res.pval.etud)<-"p.value"; res.pval.etud
# --histogramme
matt<-matrix(1:4, ncol = 2, byrow = TRUE)  ;  layout(matt)
hist(Sind.etud$temp, main = "Temp", freq = FALSE, xlab = "Temperature")  ;  abline(v=OBS.etud$Obstemp, col="red")
hist(Sind.etud$n0, main = "N0", freq = FALSE, xlab = "N0")  ;  abline(v=OBS.etud$Obsn0, col="red")
hist(Sind.etud$nodf, main = "NODF", freq = FALSE, xlab = "NODF")  ;  abline(v=OBS.etud$Obsnodf, col="red")
hist(Sind.etud$Cscore, main = "Cscore", freq = FALSE, xlab = "Cscore")  ;  abline(v=OBS.etud$ObsCscore, col="red")
# Calcul des distances sur les Mpa simulées
nobs<-dim(OBSdist)[1] ; simul<-dim(Smpa.etud)[3]
SIMcooc<-matrix(0,nobs,simul) ;  SIMsor<-matrix(0,nobs,simul)  # matrice des indicateurs de cooc et Sor simulés
pb <- winProgressBar(title = "progress bar", min = 0, max = simul, width = 300)
for (i in 1:simul){
simcooc<-distance(Smpa.etud[,,i])  ;  SIMcooc[,i]<-simcooc$cooc  ;  SIMsor[,i]<-simcooc$Sor
setWinProgressBar(pb, i, title=paste( round(i/simul*100, 0),"% of iterations done (",i,")"))
}
close(pb)
# Les cooccurrences significatives
combi<-dim(OBSdist)[1]
for (i in 1:combi){
OBSdist$p.val.cooc[i]<-Exactest(OBSdist$cooc[i],SIMcooc[i,])
OBSdist$meanSimCooc[i]<-mean(SIMcooc[i,])
if(OBSdist$cooc[i]>mean(SIMcooc[i,])){
OBSdist$sens.cooc[i]<-"Similarite"
}else if((OBSdist$cooc[i]<mean(SIMcooc[i,]))){
OBSdist$sens.cooc[i]<-"Dissimilarite"
}
}
Test.cooc<-OBSdist[OBSdist$p.val.cooc<=0.21,]  ;  head(Test.cooc[,-4],5)
###########################################
# CODE R POUR CONSTRUIRE LES RESEAUX NONS #
# INTERACTIFS                             #
###########################################
# Définir les couleurs du graphe
color1<-"darkseagreen2" ; color2<-"lightblue1" ; color3<-"black"
# Jeu de données pour représenter le graphe
bdgraph<-Test.cooc[,c("from","to","Sor")]
g=graph.data.frame(bdgraph[,-3], directed=FALSE)
graph_layout=layout.fruchterman.reingold(g)
# Représentation du graphe
plot.igraph(g,
layout=graph_layout,
edge.width=(exp(bdgraph$Sor)),
vertex.label.cex=0.9,
vertex.color=color1,
vertex.frame.color=color2,
vertex.size=18,
edge.color=color3
)
######################################################
# CODE R POUR CONSTRUIRE UN RESEAU INTERACTIF AVEC R #
######################################################
# Les noeuds du graphe
vertx<-as.factor(vertex.attributes(g)$name)
nnod<-length(vertx)
netw3d.from<-as.character(Test.cooc$from)
netw3d.to<-as.character(Test.cooc$to)
# Création du jeu de données de description des noeud
# Nom des noeuds
MyNodes<-data.frame( species=levels(vertx) )  ;  group<-c()
# Groupe des noeuds
for (i in 1:nnod) {
nom.e<-as.character(etudiants$Etudiants)
grp.e<-etudiants[nom.e==as.character(MyNodes[i,]),2]
grp<-as.character(grp.e)
group<-c(group,grp)
}
# resultat
MyNodes<-data.frame( student=levels(vertx) ,
group=factor(group) ,
size=rep(5,nnod))
# Jeu de données qui spécifie les liens entre les étudiants
# ( On fait -1 pour indexer à 0)
# (+1 pour eviter des liens nuls)
MyLinks<-data.frame(from=as.double(factor(netw3d.from,levels(vertx)))-1,
to=as.double(factor(netw3d.to,levels(vertx)))-1,
Cooc=Test.cooc$cooc+1,
typeLink=as.factor(Test.cooc$sens.cooc ))
# Vecteur de couleur des liens entre les étudiants
Colinks<-ifelse(MyLinks$typeLink=="Similarite","black","red")
MyLinks$Linkcolor<-Colinks
# Représentation du graphe
forceNetwork(Links = MyLinks, Nodes = MyNodes, Source = "from",
Target = "to", Value = "Cooc", NodeID = "student",
Group = "group", opacity = 0.9, Nodesize = "size",
linkDistance = 90, fontSize = 20, linkColour = Colinks,
legend = TRUE)
head(MyNodes,3)
head(MyLinks,3)
blogdown:::serve_site()
blogdown:::serve_site()
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
etudiants
etudiants<-read.table("F:/codeSources/etudiants.txt",header = TRUE, sep = "\t")
Mpa.etud<-as.matrix(etudiants[,-c(2,1)])  ;   row.names(Mpa.etud)<-etudiants[,1]
etudiants
blogdown:::serve_site()
